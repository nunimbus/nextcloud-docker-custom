<?php

$CONFIG = array();

/**
 * All other configuration options
 */

/**
 * To have clean URLs without `/index.php` this parameter needs to be configured.
 *
 * This parameter will be written as "RewriteBase" on update and installation of
 * Nextcloud to your `.htaccess` file. While this value is often simply the URL
 * path of the Nextcloud installation it cannot be set automatically properly in
 * every scenario and needs thus some manual configuration.
 *
 * In a standard Apache setup this usually equals the folder that Nextcloud is
 * accessible at. So if Nextcloud is accessible via "https://mycloud.org/nextcloud"
 * the correct value would most likely be "/nextcloud". If Nextcloud is running
 * under "https://mycloud.org/" then it would be "/".
 *
 * Note that the above rule is not valid in every case, as there are some rare setup
 * cases where this may not apply. However, to avoid any update problems this
 * configuration value is explicitly opt-in.
 *
 * After setting this value run `occ maintenance:update:htaccess`. Now, when the
 * following conditions are met Nextcloud URLs won't contain `index.php`:
 *
 * - `mod_rewrite` is installed
 * - `mod_env` is installed
 *
 * Defaults to ``''`` (empty string)
 */
$htaccess_RewriteBase = getenv('NEXTCLOUD_HTACCESS_REWRITEBASE');
if ($htaccess_RewriteBase !== false) {
  $CONFIG['htaccess.RewriteBase'] = $htaccess_RewriteBase;
}

/**
 * For server setups, that don't have `mod_env` enabled or restricted (e.g. suEXEC)
 * this parameter has to be set to true and will assume mod_rewrite.
 *
 * Please check, if `mod_rewrite` is active and functional before setting this
 * parameter and you updated your .htaccess with `occ maintenance:update:htaccess`.
 * Otherwise your nextcloud installation might not be reachable anymore.
 * For example, try accessing resources by leaving out `index.php` in the URL.
 */
$htaccess_IgnoreFrontController = getenv('NEXTCLOUD_HTACCESS_IGNOREFRONTCONTROLLER');
if ($htaccess_IgnoreFrontController !== false) {
  $CONFIG['htaccess.IgnoreFrontController'] = $htaccess_IgnoreFrontController;
}

/**
 * Override where Nextcloud stores temporary files. Useful in situations where
 * the system temporary directory is on a limited space ramdisk or is otherwise
 * restricted, or if external storages which do not support streaming are in
 * use.
 *
 * The Web server user must have write access to this directory.
 */
$tempdirectory = getenv('NEXTCLOUD_TEMPDIRECTORY');
if ($tempdirectory !== false) {
  $CONFIG['tempdirectory'] = $tempdirectory;
}

/**
 * Hashing
 */

/**
 * By default Nextcloud will use the Argon2 password hashing if available.
 * However if for whatever reason you want to stick with the PASSWORD_DEFAULT
 * of your php version. Then set the setting to true.
 */
$hashing_default_password = getenv('NEXTCLOUD_HASHING_DEFAULT_PASSWORD');
if ($hashing_default_password !== false) {
  $CONFIG['hashing_default_password'] = $hashing_default_password;
}

/**
 *
 * Nextcloud uses the Argon2 algorithm (with PHP >= 7.2) to create hashes by its
 * own and exposes its configuration options as following. More information can
 * be found at: https://www.php.net/manual/en/function.password-hash.php
 */

/**
 * The number of CPU threads to be used by the algorithm for computing a hash.
 * The value must be an integer, and the minimum value is 1. Rationally it does
 * not help to provide a number higher than the available threads on the machine.
 * Values that undershoot the minimum will be ignored in favor of the minimum.
 */
$hashingThreads = getenv('NEXTCLOUD_HASHINGTHREADS');
if ($hashingThreads !== false) {
  $CONFIG['hashingThreads'] = $hashingThreads;
}

/**
 * The memory in KiB to be used by the algorithm for computing a hash. The value
 * must be an integer, and the minimum value is 8 times the number of CPU threads.
 * Values that undershoot the minimum will be ignored in favor of the minimum.
 */
$hashingMemoryCost = getenv('NEXTCLOUD_HASHINGMEMORYCOST');
if ($hashingMemoryCost !== false) {
  $CONFIG['hashingMemoryCost'] = $hashingMemoryCost;
}

/**
 * The number of iterations that are used by the algorithm for computing a hash.
 * The value must be an integer, and the minimum value is 1. Values that
 * undershoot the minimum will be ignored in favor of the minimum.
 */
$hashingTimeCost = getenv('NEXTCLOUD_HASHINGTIMECOST');
if ($hashingTimeCost !== false) {
  $CONFIG['hashingTimeCost'] = $hashingTimeCost;
}

/**
 * The hashing cost used by hashes generated by Nextcloud
 * Using a higher value requires more time and CPU power to calculate the hashes
 */
$hashingCost = getenv('NEXTCLOUD_HASHINGCOST');
if ($hashingCost !== false) {
  $CONFIG['hashingCost'] = $hashingCost;
}

/**
 * Blacklist a specific file or files and disallow the upload of files
 * with this name. ``.htaccess`` is blocked by default.
 * WARNING: USE THIS ONLY IF YOU KNOW WHAT YOU ARE DOING.
 *
 * Defaults to ``array('.htaccess')``
 */
$blacklisted_files = getenv('NEXTCLOUD_BLACKLISTED_FILES');
if ($blacklisted_files !== false) {
  $CONFIG['blacklisted_files'] = explode(',', $blacklisted_files);
}

/**
 * Define a default folder for shared files and folders other than root.
 * Changes to this value will only have effect on new shares.
 *
 * Defaults to ``/``
 */
$share_folder = getenv('NEXTCLOUD_SHARE_FOLDER');
if ($share_folder !== false) {
  $CONFIG['share_folder'] = $share_folder;
}

/**
 * The default cipher for encrypting files. Currently supported are:
 *  - AES-256-CTR
 *  - AES-128-CTR
 *  - AES-256-CFB
 *  - AES-128-CFB
 *
 * Defaults to ``AES-256-CTR``
 */
$cipher = getenv('NEXTCLOUD_CIPHER');
if ($cipher !== false) {
  $CONFIG['cipher'] = $cipher;
}

/**
 * The minimum Nextcloud desktop client version that will be allowed to sync with
 * this server instance. All connections made from earlier clients will be denied
 * by the server. Defaults to the minimum officially supported Nextcloud desktop
 * clientversion at the time of release of this server version.
 *
 * When changing this, note that older unsupported versions of the Nextcloud desktop
 * client may not function as expected, and could lead to permanent data loss for
 * clients or other unexpected results.
 *
 * Defaults to ``2.0.0``
 */
$minimum_supported_desktop_version = getenv('NEXTCLOUD_MINIMUM_SUPPORTED_DESKTOP_VERSION');
if ($minimum_supported_desktop_version !== false) {
  $CONFIG['minimum.supported.desktop.version'] = $minimum_supported_desktop_version;
}

/**
 * Option to allow local storage to contain symlinks.
 * WARNING: Not recommended. This would make it possible for Nextcloud to access
 * files outside the data directory and could be considered a security risk.
 *
 * Defaults to ``false``
 */
$localstorage_allowsymlinks = getenv('NEXTCLOUD_LOCALSTORAGE_ALLOWSYMLINKS');
if ($localstorage_allowsymlinks !== false) {
  $CONFIG['localstorage.allowsymlinks'] = $localstorage_allowsymlinks;
}

/**
 * EXPERIMENTAL: option whether to include external storage in quota
 * calculation, defaults to false.
 *
 * Defaults to ``false``
 */
$quota_include_external_storage = getenv('NEXTCLOUD_QUOTA_INCLUDE_EXTERNAL_STORAGE');
if ($quota_include_external_storage !== false) {
  $CONFIG['quota_include_external_storage'] = $quota_include_external_storage;
}

/**
 * When an external storage is unavailable for some reasons, it will be flagged
 * as such for 10 minutes. When the trigger is a failed authentication attempt
 * the delay is higher and can be controlled with this option. The motivation
 * is to make account lock outs at Active Directories (and compatible) more
 * unlikely.
 *
 * Defaults to ``1800`` (seconds)
 */
$external_storage_auth_availability_delay = getenv('NEXTCLOUD_EXTERNAL_STORAGE_AUTH_AVAILABILITY_DELAY');
if ($external_storage_auth_availability_delay !== false) {
  $CONFIG['external_storage.auth_availability_delay'] = $external_storage_auth_availability_delay;
}

/**
 * Specifies how often the local filesystem (the Nextcloud data/ directory, and
 * NFS mounts in data/) is checked for changes made outside Nextcloud. This
 * does not apply to external storages.
 *
 * 0 -> Never check the filesystem for outside changes, provides a performance
 * increase when it's certain that no changes are made directly to the
 * filesystem
 *
 * 1 -> Check each file or folder at most once per request, recommended for
 * general use if outside changes might happen.
 *
 * Defaults to ``0``
 */
$filesystem_check_changes = getenv('NEXTCLOUD_FILESYSTEM_CHECK_CHANGES');
if ($filesystem_check_changes !== false) {
  $CONFIG['filesystem_check_changes'] = $filesystem_check_changes;
}

/**
 * By default Nextcloud will store the part files created during upload in the
 * same storage as the upload target. Setting this to false will store the part
 * files in the root of the users folder which might be required to work with certain
 * external storage setups that have limited rename capabilities.
 *
 * Defaults to ``true``
 */
$part_file_in_storage = getenv('NEXTCLOUD_PART_FILE_IN_STORAGE');
if ($part_file_in_storage !== false) {
  $CONFIG['part_file_in_storage'] = $part_file_in_storage;
}

/**
 * Where ``mount.json`` file should be stored, defaults to ``data/mount.json``
 * in the Nextcloud directory.
 *
 * Defaults to ``data/mount.json`` in the Nextcloud directory.
 */
$mount_file = getenv('NEXTCLOUD_MOUNT_FILE');
if ($mount_file !== false) {
  $CONFIG['mount_file'] = $mount_file;
}

/**
 * When ``true``, prevent Nextcloud from changing the cache due to changes in
 * the filesystem for all storage.
 *
 * Defaults to ``false``
 */
$filesystem_cache_readonly = getenv('NEXTCLOUD_FILESYSTEM_CACHE_READONLY');
if ($filesystem_cache_readonly !== false) {
  $CONFIG['filesystem_cache_readonly'] = $filesystem_cache_readonly;
}

/**
 * max file size for animating gifs on public-sharing-site.
 * If the gif is bigger, it'll show a static preview
 *
 * Value represents the maximum filesize in megabytes. Set to ``-1`` for
 * no limit.
 *
 * Defaults to ``10`` megabytes
 */
$max_filesize_animated_gifs_public_sharing = getenv('NEXTCLOUD_MAX_FILESIZE_ANIMATED_GIFS_PUBLIC_SHARING');
if ($max_filesize_animated_gifs_public_sharing !== false) {
  $CONFIG['max_filesize_animated_gifs_public_sharing'] = $max_filesize_animated_gifs_public_sharing;
}

/**
 * Enables transactional file locking.
 * This is enabled by default.
 *
 * Prevents concurrent processes from accessing the same files
 * at the same time. Can help prevent side effects that would
 * be caused by concurrent operations. Mainly relevant for
 * very large installations with many users working with
 * shared files.
 *
 * Defaults to ``true``
 */
$filelocking_enabled = getenv('NEXTCLOUD_FILELOCKING_ENABLED');
if ($filelocking_enabled !== false) {
  $CONFIG['filelocking.enabled'] = $filelocking_enabled;
}

/**
 * Set the lock's time-to-live in seconds.
 *
 * Any lock older than this will be automatically cleaned up.
 *
 * Defaults to ``60*60`` seconds (1 hour) or the php
 *             max_execution_time, whichever is higher.
 */
$filelocking_ttl = getenv('NEXTCLOUD_FILELOCKING_TTL');
if ($filelocking_ttl !== false) {
  $CONFIG['filelocking.ttl'] = $filelocking_ttl;
}

/**
 * Enable locking debug logging
 *
 * Note that this can lead to a very large volume of log items being written which can lead
 * to performance degradation and large log files on busy instance.
 *
 * Thus enabling this in production for longer periods of time is not recommended
 * or should be used together with the ``log.condition`` setting.
 */
$filelocking_debug = getenv('NEXTCLOUD_FILELOCKING_DEBUG');
if ($filelocking_debug !== false) {
  $CONFIG['filelocking.debug'] = $filelocking_debug;
}

/**
 * Disable the web based updater
 */
$upgrade_disable_web = getenv('NEXTCLOUD_UPGRADE_DISABLE_WEB');
if ($upgrade_disable_web !== false) {
  $CONFIG['upgrade.disable-web'] = $upgrade_disable_web;
}

/**
 * Set this Nextcloud instance to debugging mode
 *
 * Only enable this for local development and not in production environments
 * This will disable the minifier and outputs some additional debug information
 *
 * Defaults to ``false``
 */
$debug = getenv('NEXTCLOUD_DEBUG');
if ($debug !== false) {
  $CONFIG['debug'] = $debug;
}

/**
 * Sets the data-fingerprint of the current data served
 *
 * This is a property used by the clients to find out if a backup has been
 * restored on the server. Once a backup is restored run
 * ./occ maintenance:data-fingerprint
 * To set this to a new value.
 *
 * Updating/Deleting this value can make connected clients stall until
 * the user has resolved conflicts.
 *
 * Defaults to ``''`` (empty string)
 */
$data_fingerprint = getenv('NEXTCLOUD_DATA_FINGERPRINT');
if ($data_fingerprint !== false) {
  $CONFIG['data-fingerprint'] = $data_fingerprint;
}

/**
 * use a custom lookup server to publish user data
 */
$lookup_server = getenv('NEXTCLOUD_LOOKUP_SERVER');
if ($lookup_server !== false) {
  $CONFIG['lookup_server'] = $lookup_server;
}

/**
 * set to true if the server is used in a setup based on Nextcloud's Global Scale architecture
 */
$gs_enabled = getenv('NEXTCLOUD_GS_ENABLED');
if ($gs_enabled !== false) {
  $CONFIG['gs.enabled'] = $gs_enabled;
}

/**
 * by default federation is only used internally in a Global Scale setup
 * If you want to allow federation outside of your environment set it to 'global'
 */
$gs_federation = getenv('NEXTCLOUD_GS_FEDERATION');
if ($gs_federation !== false) {
  $CONFIG['gs.federation'] = $gs_federation;
}

/**
 * List of incompatible user agents opted out from Same Site Cookie Protection.
 * Some user agents are notorious and don't really properly follow HTTP
 * specifications. For those, have an opt-out.
 *
 * WARNING: only use this if you know what you are doing
 */
foreach (getenv() as $key=>$val) {
  if (substr(trim($key), 0, 22) == 'NEXTCLOUD_CSRF_OUTPUT_') {
    if (!(isset($CONFIG['csrf.optout']) || array_key_exists('csrf.optout', $CONFIG))) {
      $CONFIG['csrf.optout'] = array();
    }
    $CONFIG['csrf.optout'][strtolower(substr(trim($key), 22))] = $val;
  }
}

/**
 * By default there is on public pages a link shown that allows users to
 * learn about the "simple sign up" - see https://nextcloud.com/signup/
 *
 * If this is set to "false" it will not show the link.
 */
$simpleSignUpLink_shown = getenv('NEXTCLOUD_SIMPLESIGNUPLINK_SHOWN');
if ($simpleSignUpLink_shown !== false) {
  $CONFIG['simpleSignUpLink.shown'] = $simpleSignUpLink_shown;
}
